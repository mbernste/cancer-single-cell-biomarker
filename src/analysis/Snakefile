#k

DATASETS1 = [
    'PJ016',
    'PJ018',
    'PJ048',
    'PJ030',
    'PJ025',
    'PJ035',
    'PJ017',
    'PJ032',
    'Mel79', 
    'Mel84', 
    'Mel59', 
    'Mel82', 
    'Mel74', 
    'Mel53', 
    'Mel80', 
    'Mel94', 
    'Mel78', 
    'Mel72', 
    'Mel65', 
    'Mel75', 
    'Mel81', 
    'Mel60', 
    'Mel89', 
    'Mel71', 
    'Mel88', 
    'Mel67', 
    'Mel58'
]

DATASETS = [
    "PJ016",
    "PJ018",
    "PJ048",
    "PJ030",
    "PJ025",
    "PJ035",
    "PJ017",
    "PJ032",
    "LX653_tumor",
    "LX661_tumor",
    "LX675_tumor",
    "LX676_tumor",
    "LX679_tumor",
    "LX680_tumor",
    "LX682_tumor",
    "LX684_tumor"
]

configfile: "../../config.json"

PAIRWISE_ALIGNED_OUTPUTS = [
        '{}/pairwise_integrations/PJ016_PJ018.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ016_PJ017.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ016_PJ025.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ016_PJ030.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ016_PJ032.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ016_PJ035.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ016_PJ048.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ017_PJ018.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ017_PJ025.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ017_PJ030.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ017_PJ032.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ017_PJ035.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ017_PJ048.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ018_PJ025.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ018_PJ030.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ018_PJ032.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ018_PJ035.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ018_PJ048.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ025_PJ030.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ025_PJ032.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ025_PJ035.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ025_PJ048.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ030_PJ032.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ030_PJ035.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ030_PJ048.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ032_PJ035.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ032_PJ048.h5'.format(config['output_dir']),
        '{}/pairwise_integrations/PJ035_PJ048.h5'.format(config['output_dir'])
]

PAIRWISE_ALIGNED_PHATE_OUTPUTS = [
        '{}/pairwise_integrations_PHATE/PJ016_PJ018_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ016_PJ017_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ016_PJ025_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ016_PJ030_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ016_PJ032_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ016_PJ035_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ016_PJ048_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ017_PJ018_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ017_PJ025_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ017_PJ030_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ017_PJ032_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ017_PJ035_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ017_PJ048_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ018_PJ025_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ018_PJ030_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ018_PJ032_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ018_PJ035_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ018_PJ048_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ025_PJ030_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ025_PJ032_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ025_PJ035_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ025_PJ048_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ030_PJ032_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ030_PJ035_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ030_PJ048_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ032_PJ035_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ032_PJ048_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/pairwise_integrations_PHATE/PJ035_PJ048_aligned_PHATE_3.tsv'.format(config['output_dir'])
]

rule all:
    input:
        '{}/cluster/cluster_de_genes.json'.format(config['output_dir']), 
        '{}/cluster/gsea_binary_matrix.tsv'.format(config['output_dir']),
        expand(
            '{out}/dim_reduc/{{tumor}}_PHATE_3.tsv'.format(
                out=config['output_dir']
            ),
            tumor=DATASETS
        ),
        expand(
            '{out}/dim_reduc/{{tumor}}_UMAP_3.tsv'.format(
                out=config['output_dir']
            ),
            tumor=DATASETS
        ),
        expand(
            '{tmp}/cluster/{{tumor}}_clusters.res_0_8.tsv'.format(
                tmp=config['output_dir']
            ),
            tumor=DATASETS
        ),
        '{}/dim_reduc/glioma_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/dim_reduc/glioma_aligned_UMAP_3.tsv'.format(config['output_dir']),
        '{}/dim_reduc/lung_adenocarcinoma_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/dim_reduc/lung_adenocarcinoma_aligned_UMAP_3.tsv'.format(config['output_dir']),
        '{}/cluster/tumor_cluster_gene_expression.tsv'.format(config['output_dir'])
        #PAIRWISE_ALIGNED_OUTPUTS,
        #PAIRWISE_ALIGNED_PHATE_OUTPUTS        

rule cluster_tumors:
    output:
        '{}/cluster/cluster_de_genes.json'.format(config['output_dir']),
        expand(
            '{tmp}/cluster/{{dataset}}_clusters.res_0_8.tsv'.format(
                tmp=config['output_dir']
            ),
            dataset=DATASETS
        )
    run:
        shell(
            'mkdir -p {}/cluster'.format(config['output_dir'])
        ),
        shell(
            'python cluster_and_de.py {}/tumor_metadata.json -r {} -o {}/cluster'.format(
                config['output_dir'],
                config['louvain_resolution'],
                config['output_dir']
            )
        )

rule compute_expression_per_cluster:
    input:
        '{}/cluster/cluster_de_genes.json'.format(config['output_dir'])
    output:
        '{}/cluster/tumor_cluster_gene_expression.tsv'.format(config['output_dir'])
    run:
        shell(
            'python identify_clusters_expressing_each_genes.py {tmp} {{input}} -o {tmp}/cluster'.format(
                tmp=config['output_dir']
            )
        ) 

rule gsea_per_cluster:
    input:
        '{}/cluster/cluster_de_genes.json'.format(config['output_dir'])
    output:
        '{}/cluster/gsea_results.tsv'.format(config['output_dir'])        
    run:
        shell(
            'python gsea.py {{input}} -o {out}/cluster'.format(
                out=config['output_dir']
            )
        )


rule compute_binary_matrix:
    input:
        '{}/cluster/gsea_results.tsv'.format(config['output_dir'])
    output:
        '{}/cluster/gsea_binary_matrix.tsv'.format(config['output_dir'])
    run:
        shell(
            'python compute_cluster_tumor_gsea_binary_matrix.py {{input}} -o {tmp}/cluster'.format(
                tmp=config['output_dir']
            )
        )

# TODO CellAssign does not seem to provide correct cell types...
rule assign_cell_types:
    output:
        expand(
            '{out}/{{tumor}}_predicted_cell_types.tsv'.format(
                out=config['output_dir']
            ),
            tumor=DATASETS
        ),
        expand(
            '{out}/{{tumor}}_predicted_cell_type_probs.tsv'.format(
                out=config['output_dir']
            ),
            tumor=DATASETS
        )
    run:
        shell(
            'Rscript assign_cell_types.R {data} {data} {data}/cell_type_markers.json'.format(
                data=config['output_dir']
            )
        )

###########################################################
#   Tumor alignment
###########################################################

rule align_tumors:
    input:
        data='{}/GSE103224_GSE123904.h5'.format(config['output_dir']),
        metadata='{}/tumor_metadata.json'.format(config['output_dir'])
    output:
        '{}/glioma_aligned.h5'.format(config['output_dir']),
        '{}/lung_adenocarcinoma_aligned.h5'.format(config['output_dir'])
    run:
        shell(
            'Rscript integration.R {{input.data}} {{input.metadata}} {out}'.format(out=config['output_dir'])
        )

rule cluster_aligned_tumors:
    input:
        '{}/GSE103224_aligned.h5'.format(config['output_dir'])
    output:
        '{}/all_tumors_cluster_de_genes_aligned.json'.format(config['output_dir']),
        '{}/all_tumors_clusters_aligned.tsv'.format(config['output_dir'])
    run:
        shell(
            'python cluster_and_de_aligned.py {tmp} -o {tmp}'.format(
                tmp=config['output_dir']
            )
        )

#############################################################
#   Pair-wise tumor alignment
#############################################################
rule align_tumors_pairwise:
    input:
        '{}/GSE103224.h5'.format(config['output_dir'])
    output:
        PAIRWISE_ALIGNED_OUTPUTS
    run:
        shell(
            'Rscript pairwise_integration.R {{input}} {tmp}/pairwise_integrations'.format(
                tmp=config['output_dir']
            )   
        )

rule run_phate_pairwise_aligned_tumors:
    input:
        PAIRWISE_ALIGNED_OUTPUTS
    output:
        PAIRWISE_ALIGNED_PHATE_OUTPUTS
    run:
        shell(
            'mkdir -p {}/pairwise_integrations_PHATE'.format(config['output_dir'])
        ),
        shell(
            'python run_phate_pairwise_tumors_aligned.py {tmp}/pairwise_integrations -n 3 -o {tmp}/pairwise_integrations_PHATE'.format(
                tmp=config['output_dir']
            )
        )


############################################################
#   Create dimensionality reduction plot of all tumors
############################################################
rule run_phate_3d_all_tumors:
    output:
        '{}/all_tumors_PHATE_3.tsv'.format(config['output_dir'])
    run:
        shell(
            'python run_phate_all_tumors.py -n 3 -o {}'.format(config['output_dir'])
        )

rule run_dim_reduc_3d_all_tumors_aligned:
    input:
        '{}/glioma_aligned.h5'.format(config['output_dir']),
        '{}/lung_adenocarcinoma_aligned.h5'.format(config['output_dir'])
    output: 
        '{}/dim_reduc/glioma_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/dim_reduc/glioma_aligned_UMAP_3.tsv'.format(config['output_dir']),
        '{}/dim_reduc/lung_adenocarcinoma_aligned_PHATE_3.tsv'.format(config['output_dir']),
        '{}/dim_reduc/lung_adenocarcinoma_aligned_UMAP_3.tsv'.format(config['output_dir'])   
    run:
        shell(
            'mkdir -p {}/dim_reduc'.format(config['output_dir'])
        ),
        shell(
            'python run_dim_reduc_aligned.py -n 3 {data} {data}/tumor_metadata.json -o {data}/dim_reduc'.format(
                data=config['output_dir']
            )
        )

rule run_umap_all_tumors:
    output:
        '{}/all_tumors_UMAP.tsv'.format(config['output_dir'])
    run:
        shell(
            'python run_umap_all_tumors.py -o {}'.format(config['output_dir'])
        )


###########################################################
#   Run dimensionality reduction for each tumor
###########################################################

rule run_dim_reduc_3d_per_dataset:
    output:
        expand(
            '{out}/dim_reduc/{{tumor}}_PHATE_3.tsv'.format(
                out=config['output_dir']
            ),
            tumor=DATASETS
        ),
        expand(
            '{out}/dim_reduc/{{tumor}}_UMAP_3.tsv'.format(
                out=config['output_dir']
            ),
            tumor=DATASETS
        )
    run:
        shell('mkdir -p {}/dim_reduc'.format(config['output_dir'])),
        shell(
            'python run_dim_reduc_per_dataset.py {out}/tumor_metadata.json -n 3 -o {out}/dim_reduc'.format(
                out=config['output_dir']
            )
        ),
        shell(
            'python run_dim_reduc_per_dataset.py {out}/tumor_metadata.json -n 3 -o {out}/dim_reduc'.format(
                out=config['output_dir']
            )
        )



